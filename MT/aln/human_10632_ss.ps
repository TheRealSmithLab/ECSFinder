%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Mon May  5 22:19:03 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAA\
) } def
/len { sequence length } bind def

/coor [
[78.72257996 183.48171997]
[84.76892090 167.64259338]
[84.76892090 152.64259338]
[84.76892090 137.64259338]
[84.76892090 122.64258575]
[71.12563324 128.87641907]
[56.71798325 124.70272064]
[48.51932144 112.14159393]
[50.49781799 97.27265167]
[61.69587708 87.29249573]
[76.69360352 87.03155518]
[88.23236847 96.61664581]
[77.62576294 86.01004791]
[67.01916504 75.40344238]
[56.41255951 64.79684448]
[37.76123047 68.64126587]
[20.64925575 60.62856674]
[11.79903889 44.10247040]
[14.56985474 25.71170425]
[3.25426364 15.86500835]
[-8.06132698 6.01831341]
[-19.37691689 -3.82838202]
[-30.95570946 -0.69488025]
[-42.48167419 -3.55221367]
[-51.07978058 -11.56712246]
[-54.66405487 -22.63519096]
[-52.44295502 -33.93244553]
[-63.29171753 -44.29122925]
[-74.14048004 -54.65000916]
[-84.98924255 -65.00878906]
[-95.83800507 -75.36757660]
[-106.68676758 -85.72635651]
[-120.07727051 -82.25005341]
[-133.32575989 -85.83840942]
[-142.97760010 -95.44429016]
[-146.57138062 -108.46624756]
[-143.26602173 -121.45241547]
[-153.87261963 -132.05902100]
[-173.52099609 -136.29173279]
[-177.91419983 -155.06819153]
[-188.99934387 -165.17361450]
[-200.08447266 -175.27905273]
[-211.16960144 -185.38449097]
[-222.59817505 -195.09983826]
[-234.35644531 -204.41343689]
[-250.02456665 -202.34336853]
[-262.51635742 -212.02481079]
[-264.42065430 -227.71395874]
[-254.60768127 -240.10269165]
[-238.89929199 -241.84101868]
[-226.61499023 -231.89759827]
[-225.04284668 -216.17170715]
[-213.28457642 -206.85810852]
[-209.67446899 -206.93972778]
[-205.85159302 -205.21925354]
[-202.69039917 -201.61964417]
[-201.06417847 -196.46961975]
[-189.97903442 -186.36418152]
[-178.89390564 -176.25875854]
[-167.80877686 -166.15332031]
[-157.57467651 -167.54110718]
[-148.08906555 -162.92662048]
[-142.64015198 -153.63768005]
[-143.26602173 -142.66561890]
[-132.65942383 -132.05902100]
[-116.58040619 -135.15620422]
[-101.66028595 -128.01696777]
[-93.82888794 -113.26045990]
[-96.32798767 -96.57511902]
[-85.47922516 -86.21633911]
[-74.63046265 -75.85755157]
[-63.78169632 -65.49877167]
[-52.93293762 -55.13999176]
[-42.08417511 -44.78120804]
[-23.91188812 -46.35983658]
[-10.05924225 -34.01113129]
[-9.53022194 -15.14397240]
[1.78536856 -5.29727697]
[13.10095882 4.54941845]
[24.41654968 14.39611340]
[34.76164627 9.83468342]
[46.11456299 9.50442696]
[56.80406952 13.49286652]
[65.24193573 21.24891281]
[70.15890503 31.65868568]
[70.79551697 43.20537567]
[67.01916504 54.19023895]
[77.62576294 64.79684448]
[88.23236847 75.40344238]
[98.83896637 86.01004791]
[113.00537109 90.94086456]
[127.90543365 89.21221924]
[142.80549622 87.48356628]
[157.70555115 85.75492096]
[163.72723389 71.62570190]
[176.01640320 62.41310883]
[191.26733398 60.59528732]
[205.37762451 66.66122437]
[214.55165100 78.97920990]
[216.32165527 94.23577118]
[210.21151733 108.32696533]
[197.86483765 117.46234131]
[182.60279846 119.18451691]
[168.53082275 113.03024292]
[159.43420410 100.65498352]
[144.53413391 102.38362885]
[129.63407898 104.11227417]
[114.73401642 105.84091949]
[128.63880920 111.46736145]
[142.54359436 117.09380341]
[156.44839478 122.72023773]
[170.35317993 128.34667969]
[185.33335876 129.11744690]
[199.30514526 134.57540894]
[210.84111023 144.16297913]
[218.76274109 156.90063477]
[222.26071167 171.48707581]
[220.97766113 186.43209839]
[215.04467773 200.20887756]
[205.06788635 211.40994263]
[192.06655884 218.89094543]
[177.36894226 221.88760376]
[162.47659302 220.09379578]
[148.91094971 213.69274902]
[138.05792236 203.33842468]
[131.02630615 190.08865356]
[128.53445435 175.29754639]
[121.34307098 162.13380432]
[114.15168762 148.97006226]
[106.96030426 135.80632019]
[99.76892090 122.64258575]
[99.76892090 137.64259338]
[99.76892090 152.64259338]
[99.76892090 167.64259338]
[105.81526184 183.48171997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[5 131]
[12 90]
[13 89]
[14 88]
[15 87]
[19 80]
[20 79]
[21 78]
[22 77]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[37 65]
[38 64]
[40 60]
[41 59]
[42 58]
[43 57]
[44 53]
[45 52]
[91 108]
[92 107]
[93 106]
[94 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
