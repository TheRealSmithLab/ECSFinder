%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Mon May  5 22:10:36 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGUAGUACUACCAAUAGAAAUACCAAUCCGUAUACUAAUCUCAUCAGAAGACGUCCUACACUCAUGAGCUGUCCCCUCACUAGGCCUAAAAACAGACGCAAUCCCAGGACGCCUAAACCAAACAACCCUCACAUCAACACGACCAGGACUAUACUAUGGCCAAUGCUCA\
) } def
/len { sequence length } bind def

/coor [
[220.48968506 74.66378021]
[208.47695923 69.90145874]
[194.37118530 75.00314331]
[180.26541138 80.10482788]
[166.15965271 85.20651245]
[160.91966248 90.45784760]
[151.74938965 90.26999664]
[137.55279541 95.11319733]
[138.11495972 109.75718689]
[132.96746826 124.06878662]
[122.47104645 135.82974243]
[107.84161377 143.05964661]
[91.01705170 144.34169006]
[74.40201569 139.07974243]
[73.64549255 155.46142578]
[58.95792389 162.75576782]
[45.44861221 153.45895386]
[47.01478577 137.13476562]
[62.04529572 130.57612610]
[59.36606216 123.57100677]
[45.97930908 130.33819580]
[32.59255600 137.10537720]
[19.20580292 143.87257385]
[5.81904984 150.63975525]
[-7.56770372 157.40695190]
[-20.95445633 164.17413330]
[-34.34120941 170.94131470]
[-42.97624588 183.20655823]
[-56.69298935 189.27705383]
[-71.57768250 187.42071533]
[-83.38330078 178.16722107]
[-88.74137878 164.15682983]
[-86.12310791 149.38710022]
[-76.27555847 138.07226562]
[-62.00849915 133.44073486]
[-47.39407349 136.81329346]
[-32.90812302 132.92007446]
[-18.42216873 129.02685547]
[-3.93621469 125.13363647]
[10.54973888 121.24041748]
[25.03569221 117.34719849]
[39.52164459 113.45397949]
[54.00759888 109.56076050]
[51.32836914 102.55564117]
[36.09542465 106.82975769]
[25.54523277 96.31582642]
[10.96610451 92.78751373]
[-4.60490847 97.93296051]
[-16.66478729 86.82028961]
[-12.80736351 70.88127136]
[2.99917650 66.51259613]
[14.49441910 78.20838928]
[29.07354736 81.73670197]
[43.26369095 77.21021271]
[54.85668182 87.97651672]
[66.53411102 69.99475098]
[84.41693115 59.73204803]
[104.19143677 58.80420303]
[121.45803833 66.67134857]
[132.70959473 80.91660309]
[146.90618896 76.07339478]
[161.05796814 71.10074615]
[175.16372681 65.99906158]
[189.26950073 60.89737320]
[203.37527466 55.79568863]
[214.88728333 41.44551849]
[232.02359009 45.15535736]
[246.03382874 39.79689407]
[260.04406738 34.43843079]
[274.05432129 29.07996750]
[288.06454468 23.72150421]
[290.49417114 7.38408947]
[300.76394653 -5.43219090]
[316.00399780 -11.29688740]
[332.03097534 -8.70135880]
[344.49621582 1.55446148]
[358.40628052 -4.05899191]
[356.06640625 -18.80808830]
[357.04080200 -33.69942856]
[361.27679443 -47.99798584]
[368.56079102 -60.99901581]
[378.52911377 -72.06277466]
[390.68618774 -80.64600372]
[404.42904663 -86.32862091]
[419.07730103 -88.83424377]
[433.90689087 -88.04366302]
[437.96530151 -102.48420715]
[426.48437500 -112.54158020]
[420.51202393 -126.58771515]
[421.23410034 -141.83374023]
[428.50723267 -155.25254822]
[440.88732910 -164.17982483]
[455.91629028 -166.84304810]
[470.61013794 -162.71343994]
[482.05139160 -152.61093140]
[487.96835327 -138.54139709]
[487.18624878 -123.29832458]
[479.86035156 -109.90825653]
[467.44519043 -101.02980804]
[452.40585327 -98.42578125]
[448.34744263 -83.98524475]
[460.32836914 -77.62275696]
[470.77703857 -68.97122192]
[479.26266479 -58.38735580]
[485.43536377 -46.30754089]
[489.04061890 -33.22984314]
[504.01809692 -34.05135727]
[517.37384033 -42.53285217]
[530.50573730 -35.50420761]
[545.48321533 -36.32572556]
[558.83892822 -44.80721664]
[571.97088623 -37.77857590]
[586.94836426 -38.60009384]
[589.26196289 -53.47761536]
[594.61865234 -67.54885864]
[602.78417969 -80.19867706]
[613.40161133 -90.87408447]
[626.00671387 -99.10839844]
[640.04858398 -104.54164124]
[654.91326904 -106.93630219]
[669.95098877 -106.18769073]
[684.50439453 -102.32853699]
[697.93719482 -95.52754974]
[709.66223145 -86.08203888]
[719.16687012 -74.40491486]
[726.03564453 -61.00665665]
[729.96832275 -46.47297287]
[730.79290771 -31.43922043]
[728.47338867 -16.56260872]
[723.11120605 -2.49347663]
[714.94073486 10.15313148]
[704.31909180 20.82435989]
[691.71069336 29.05371094]
[677.66674805 34.48143005]
[662.80108643 36.87024307]
[647.76367188 36.11571884]
[633.21179199 32.25084305]
[619.78167725 25.44457054]
[608.06036377 15.99444485]
[598.56030273 4.31358242]
[591.69677734 -9.08737850]
[587.76983643 -23.62260628]
[572.79235840 -22.80108833]
[560.50793457 -14.37835598]
[546.30474854 -21.34823799]
[531.32727051 -20.52672195]
[519.04284668 -12.10398960]
[504.83963013 -19.07387161]
[489.86215210 -18.25235558]
[487.16217041 -2.79698253]
[480.92950439 11.61113167]
[471.50393677 24.17613602]
[459.40161133 34.20292282]
[445.28701782 41.13558578]
[429.93627930 44.58824158]
[414.19467163 44.36649323]
[398.92990112 40.47839355]
[384.98449707 33.13421249]
[373.12899780 22.73506927]
[364.01971436 9.85104561]
[350.10968018 15.46449852]
[349.09405518 29.10353661]
[342.26135254 41.02769089]
[330.89886475 48.87560272]
[317.19714355 51.06480789]
[303.82788086 47.11057663]
[293.42303467 37.73174667]
[279.41278076 43.09020996]
[265.40252686 48.44867325]
[251.39230347 53.80713654]
[237.38204956 59.16559982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 62]
[7 61]
[8 60]
[14 19]
[44 55]
[46 53]
[47 52]
[67 171]
[68 170]
[69 169]
[70 168]
[71 167]
[76 161]
[77 160]
[86 101]
[87 100]
[106 149]
[107 148]
[109 146]
[110 145]
[112 143]
[113 142]
] def

init

% Start Annotations
2 65 0.0 1 colorpair
3 64 0.16 1 colorpair
4 63 0.32 0.2 colorpair
5 62 0.0 0.6 colorpair
7 61 0.0 0.6 colorpair
14 19 0.0 0.6 colorpair
44 55 0.0 1 colorpair
46 53 0.0 1 colorpair
47 52 0.0 1 colorpair
68 170 0.0 1 colorpair
69 169 0.16 1 colorpair
71 167 0.0 1 colorpair
76 161 0.0 1 colorpair
77 160 0.0 1 colorpair
86 101 0.0 1 colorpair
106 149 0.0 1 colorpair
107 148 0.0 1 colorpair
109 146 0.0 1 colorpair
110 145 0.0 1 colorpair
112 143 0.0 1 colorpair
113 142 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 cmark
4 63 2 gmark
4 cmark
63 cmark
5 62 1 gmark
7 61 1 gmark
8 60 6 gmark
60 cmark
14 19 1 gmark
67 171 5 gmark
69 cmark
70 168 4 gmark
168 cmark
87 100 8 gmark
87 cmark

% End Annotations
showpage
end
%%EOF
