%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Mon May  5 22:11:56 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUAGAAAUACCAAUCCGUAUACUAAUCUCAUCAGAAGACGUCCUACACUCAUGAGCUGUCCCCUCACUAGGCCUAAAAACAGACGCAAUCCCAGGACGCCUAAACCAAACAACCCUCACAUCAACACGACCAGGACUAUACUAUGGC\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 156.59089661]
[92.50000000 140.75177002]
[92.50000000 125.75176239]
[85.30861664 138.91549683]
[78.11723328 152.07923889]
[70.92584991 165.24298096]
[63.73446655 178.40672302]
[62.70412064 193.37129211]
[58.51656342 207.77491760]
[51.36317062 220.95933533]
[41.57085419 232.32202148]
[29.58713341 241.34367371]
[15.95966816 247.61203003]
[1.31124282 250.84059143]
[-13.68870068 250.88183594]
[-28.35465622 247.73385620]
[-42.01638031 241.54052734]
[-54.04952240 232.58488464]
[-63.90415955 221.27621460]
[-71.12993622 208.13131714]
[-75.39662170 193.75093079]
[-76.50923157 178.79225159]
[-74.41691589 163.93890381]
[-69.21529388 149.86967468]
[-61.14208221 137.22755432]
[-50.56623840 126.59027863]
[-37.97107697 118.44400024]
[-23.93220711 113.16098785]
[-9.09121609 110.98269653]
[5.87365580 112.00865936]
[20.27727699 116.19149017]
[35.11188507 113.97013092]
[49.94649124 111.74876404]
[64.78109741 109.52739716]
[79.61569977 107.30603790]
[65.53213501 102.14337921]
[55.86017990 109.18494415]
[44.10630035 110.63867188]
[33.23334503 106.25559235]
[25.92531586 97.24339294]
[23.92497444 85.93634796]
[10.06678200 80.19609833]
[0.87647313 79.79379272]
[-4.01653099 74.19135284]
[-17.75312996 68.16591644]
[-33.16122437 72.63471985]
[-46.17816544 63.25714874]
[-46.81847000 47.22687912]
[-34.59095001 36.84096146]
[-18.87551498 40.06657791]
[-11.72769928 54.42931747]
[2.00890040 60.45475006]
[15.80703354 66.33790588]
[29.66522598 72.07815552]
[46.06556320 64.04905701]
[63.44652176 70.60969543]
[70.69478607 88.05980682]
[84.77835846 93.22246552]
[96.80334473 84.25588226]
[95.87386322 69.28470612]
[92.19894409 60.85152054]
[95.08313751 53.99511719]
[94.46326447 39.00793076]
[93.84338379 24.02074432]
[91.68077087 9.17746067]
[87.99848938 -5.36354351]
[73.84065247 -12.00355339]
[67.31017303 -26.21224403]
[71.49054718 -41.28070450]
[84.40792084 -50.09407043]
[99.96311188 -48.49093628]
[110.81143188 -37.22826004]
[111.83064270 -21.62392426]
[102.53948975 -9.04582596]
[106.22177124 5.49517822]
[112.39978027 -8.17348099]
[124.50417328 -17.03257751]
[139.40104675 -18.78843307]
[153.23350525 -12.98644257]
[162.42024231 -1.12878180]
[164.58271790 13.71452236]
[159.16108704 27.70043755]
[147.55902100 37.20792007]
[132.78039551 39.77541351]
[118.65147400 34.73818207]
[108.83057404 23.40086937]
[109.45044708 38.38805771]
[110.07032013 53.37524414]
[110.84503937 68.35522461]
[111.77452087 83.32640076]
[115.56056213 83.24932861]
[119.54759979 83.91614532]
[123.60086823 85.37483215]
[127.57700348 87.65017700]
[131.32788086 90.74251556]
[146.24784851 92.28988647]
[160.77256775 86.01746368]
[172.63377380 95.02640533]
[187.55375671 96.57377625]
[202.07846069 90.30135345]
[213.93966675 99.31029510]
[228.85964966 100.85766602]
[233.48731995 86.53012848]
[240.99307251 73.47802734]
[251.04878235 62.27193832]
[263.21484375 53.40175247]
[276.95944214 47.25522995]
[291.68173218 44.10107422]
[306.73803711 44.07717133]
[321.47024536 47.18455887]
[335.23428345 53.28740692]
[347.42849731 62.11891556]
[357.51971436 73.29301453]
[365.06689453 86.32121277]
[369.74002075 100.63398743]
[371.33486938 115.60562897]
[369.78167725 130.58164978]
[365.14837646 144.90737915]
[357.63748169 157.95652771]
[347.57736206 169.15864563]
[335.40780640 178.02404785]
[321.66079712 184.16516113]
[306.93728638 187.31352234]
[291.88095093 187.33151245]
[277.14996338 184.21832275]
[263.38833618 178.11006165]
[251.19761658 169.27375793]
[241.11077881 158.09568787]
[233.56874084 145.06451416]
[228.90122986 130.74990845]
[227.31227112 115.77764130]
[212.39230347 114.23027039]
[198.93476868 120.61337280]
[186.00637817 111.49375153]
[171.08641052 109.94638062]
[157.62886047 116.32948303]
[144.70048523 107.20986176]
[129.78050232 105.66249084]
[124.21038055 110.68480682]
[136.56204224 119.19577026]
[151.28634644 122.05846405]
[160.24621582 134.08845520]
[158.77185059 149.01582336]
[147.63168335 159.06054688]
[132.63186646 158.98742676]
[121.59015656 148.83454895]
[120.26151276 133.89318848]
[113.07012939 120.72944641]
[107.50000000 125.75176239]
[107.50000000 140.75177002]
[113.54634094 156.59089661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[35 58]
[36 57]
[41 54]
[42 53]
[44 52]
[45 51]
[59 90]
[60 89]
[62 88]
[63 87]
[64 86]
[65 75]
[66 74]
[95 138]
[96 137]
[98 135]
[99 134]
[101 132]
[102 131]
] def

init

% Start Annotations
2 150 0.0 1 colorpair
3 149 0.0 1 colorpair
35 58 0.16 1 colorpair
36 57 0.0 1 colorpair
41 54 0.0 1 colorpair
42 53 0.0 1 colorpair
44 52 0.16 1 colorpair
45 51 0.0 0.6 colorpair
60 89 0.0 1 colorpair
62 88 0.32 0.6 colorpair
63 87 0.0 1 colorpair
65 75 0.0 1 colorpair
66 74 0.0 1 colorpair
95 138 0.0 1 colorpair
96 137 0.0 1 colorpair
98 135 0.0 1 colorpair
99 134 0.0 1 colorpair
101 132 0.0 1 colorpair
102 131 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
58 cmark
52 cmark
45 51 1 gmark
59 90 4 gmark
62 88 1 gmark
62 cmark
88 cmark
64 86 6 gmark
64 cmark

% End Annotations
showpage
end
%%EOF
